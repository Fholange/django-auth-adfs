Azure AD
========

Getting this module to work is sometimes not so straight forward. If your not familiar with JWT tokens or Azure AD
itself, it might take some tries to get all settings right.

This guide tries to give a basic overview of how to configure Azure AD and how to determine the settings for
django-auth-adfs. Installing and configuring the basics of Azure AD is not explained here.

.. _step-1:
Step 1 - Register a backend application
--------------------------------

After signing in to `Azure <https://portal.azure.com>`_. Open the **Azure Active Directory** dashboard. 

.. image:: _static/2021/01-azure_active_directory.png
   :scale: 50 %

------------


Note down your **Tenant_ID** you will need it later.


.. image:: _static/2021/02-azure_dashboard.png
    :scale: 50 %

------------


Navigate to **App Registrations**, then click **New registration** in the upper left hand corner.


.. image:: _static/2021/03-new_registrations.png
    :scale: 50 %

------------


Here you register your application. 

1. The display name of your application. 
2. What type of accounts can access your application.
3. Here you need to add allowed redirect URIs. The Redirect URI value must match with the domain where your Django application is located(*eg. http://localhost:8000/oauth2/callback*).


.. image:: _static/2021/04-app_registrations_specs.png
    :scale: 50 %

------------


When done registering, you will be redirected to your applications overview. Here you need to note down your **Client_ID**. This is how your Django project finds the right Azure application.  


.. image:: _static/2021/05-application_overview.png
    :scale: 50 %

------------


Next we need to generate a **Client_Secret**. Your application will use this to prove its identity when requesting a token. 


.. image:: _static/2021/06-add_Secret.png
    :scale: 50 %

------------


Give it a short name. It is not important what it is, only used by you, to better keep track of them incase you make more.


.. image:: _static/2021/07-add_Secret_name.png
    :scale: 50 %

------------


It will be become hidden after a short time, so be sure to note this one down quick.


.. image:: _static/2021/08-copy_Secret.png
    :scale: 50 %

------------


    
Step 2 - Configuring settings.py
--------------------------------------------------------
We need to update the ``settings.py`` to accomedate for our registered Azure AD application. 

Replace your AUTH_ADFS with this.

.. code-block:: python

    # Client secret is not public information. Should store it as an environment variable.
    
    client_id = 'Your client id here'
    cient_secret = 'Your client secret here'
    tenant_id = 'Your tenant id here'
    

    AUTH_ADFS = {
        'AUDIENCE': client_id,
        'CLIENT_ID': client_id,
        'CLIENT_SECRET': cient_secret,
        'CLAIM_MAPPING': {'first_name': 'given_name',
                          'last_name': 'family_name',
                          'email': 'upn'},
        'GROUPS_CLAIM': 'roles',
        'MIRROR_GROUPS': True,
        'USERNAME_CLAIM': 'upn',
        'TENANT_ID': tenant_id,
        'RELYING_PARTY_ID': client_id,
    }
    

Add this to your AUTHENTICATION_BACKENDS.

.. code-block:: python

    AUTHENTICATION_BACKENDS = [
        ...
        'django_auth_adfs.backend.AdfsAccessTokenBackend',
        ...
    ]



Add this path to your projects ``urls.py`` file.

.. code-block:: python

    urlpatterns = [
        ...
        path('oauth2/', include('django_auth_adfs.urls')),
        ...
    ] 
    
Step 3 - Register and configure an Azure AD frontend application
--------------------------------------------------------
Just like we did with our backend application in ::ref:`step-1`. We have to register a new app for your frontend. Here we need to set it to SPA and use your host/homepage as a callback uri.



.. image:: _static/2021/09_register_frontend_app.PNG
    :scale: 50 %

------------

Copy your frontend's client ID, you will need later



.. image:: _static/2021/10_copy-frontend-client_id.png
    :scale: 50 %

------------

Now we need to add a scope of permissions to our API. 
Navigate back to app registrations and click on your backend application.
Go to **Expose an API** in the sidebar and press **add a scope**.


.. image:: _static/2021/11-navigate_to_expose_an_api.PNG
    :scale: 50 %

------------

If you have not created an Application ID URI, it will be autogenerated for you. Select it and press **save and continue**.


.. image:: _static/2021/13_set_app_id.PNG
    :scale: 50 %

------------

Then we will create the actual scope. Call it "read", and just fill in all the required fields with "read" (maybe write an actual description).



.. image:: _static/2021/14_add_a_scope.PNG
    :scale: 50 %

------------

Now we are going to add our frontend application as a trusted app for our backend. Press **add a client application**


.. image:: _static/2021/15_add_authorized_app_1.png
    :scale: 50 %

------------

Here you need to paste in your frontend application (client) id.


.. image:: _static/2021/16_add_authorized_app_2.PNG
    :scale: 50 %

------------

Now navigate back to app registrations. Click on your FRONTEND application and navigate to API permissions. Press **add a permisson**.


.. image:: _static/2021/17_navigate_to_api_permissions.PNG
    :scale: 50 %

------------

Then we have to press **My API's** and then select the backend application. This could be different if you don't have owner rights of the backend application.


.. image:: _static/2021/18_add_permission.PNG
    :scale: 50 %

------------

Here we can give our frontend the permission scope we created earlier in step #href XX. Press Delegated permissions (should be default) and select the permission you created and press **add permission**



.. image:: _static/2021/19_add-permission-2.PNG
    :scale: 50 %

------------
